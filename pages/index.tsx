import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import { useAuth } from "../contexts/AuthContext";
import styles from "../styles/Home.module.scss";

export interface ITeamName {
  id: string;
  name: string;
  votes: number;
  voted_by: IVotedBy[];
  createdBy: string;
}

export interface IVotedBy {
  email: string;
  vote: number;
}

const Home: NextPage = () => {
  const {
    logout,
    getTeamNames,
    addTeamName,
    currentUser,
    deleteTeamName,
    upVote,
    downVote,
  } = useAuth();
  const [teamNames, setTeamNames] = useState<ITeamName[]>([]);
  const newTeamNameRef = useRef<HTMLInputElement | null>(null);

  const getNames = async () => {
    const names: ITeamName[] = await getTeamNames();

    setTeamNames(names);
  };

  useEffect(() => {
    getNames();
  }, []);

  return (
    <div className={styles.container}>
      <Head>
        <title>Team names</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.teamNames}>
        {teamNames.map((teamName, id) => (
          <div className={styles.teamName} key={id}>
            {currentUser.email === teamName.createdBy && (
              <button
                className="button is-danger"
                onClick={() => {
                  deleteTeamName(teamName);
                  getNames();
                }}
              >
                X
              </button>
            )}

            <div className={styles.name}>{teamName.name}</div>
            <div className={styles.votes}>
              <div
                className={styles.up}
                onClick={() => {
                  upVote(teamName);
                  getNames();
                }}
              >
                ^
              </div>
              <div className={styles.number}>{teamName.votes}</div>
              <div
                className={styles.down}
                onClick={() => {
                  downVote(teamName);
                  getNames();
                }}
              >
                v
              </div>
            </div>
          </div>
        ))}
        <div className={styles.newTeamName}>
          <input type="text" placeholder="team name" ref={newTeamNameRef} />
          <button
            className="button is-dark"
            onClick={() => {
              if (!newTeamNameRef.current?.value.length) return;
              addTeamName(newTeamNameRef.current?.value);
              getNames();
              newTeamNameRef.current.value = "";
            }}
          >
            Add newTeamName
          </button>
        </div>
      </div>
      <button onClick={logout}>logout</button>
    </div>
  );
};

export default Home;
